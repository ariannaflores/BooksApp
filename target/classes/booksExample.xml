<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <http:listener-config name="booksExample-httpListenerConfig" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="booksExample-config" raml="booksExample.raml" consoleEnabled="false" doc:name="Router" keepRamlBaseUri="false">
        <apikit:flow-mapping resource="/Library" action="get" flow-ref="get:/Library:booksExample-config"/>
        <apikit:flow-mapping resource="/Library" action="post" content-type="application/json" flow-ref="post:/Library:booksExample-config"/>
        <apikit:flow-mapping resource="/{bookId}" action="put" content-type="application/json" flow-ref="put:/{bookId}:booksExample-config"/>
        <apikit:flow-mapping resource="/{bookId}" action="delete" flow-ref="delete:/{bookId}:booksExample-config"/>
    </apikit:config>
    <spring:beans>
        <spring:bean id="Library" name="Library" class="java.util.HashMap"/>
    </spring:beans>
    <flow name="booksExample-main">
        <http:listener config-ref="booksExample-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="booksExample-config" doc:name="APIkit Router"/>
        <exception-strategy ref="booksExample-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="booksExample-console">
        <http:listener config-ref="booksExample-httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="booksExample-config" doc:name="APIkit Console"/>
    </flow>
    <flow name="put:/{bookId}:booksExample-config">
        <choice doc:name="Choice">
            <when expression="#[app.registry['Library'].containsKey(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')))]">
                                <set-variable variableName="objectData" value="#[app.registry['Library'].get(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')))]" doc:name="Variable"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"id": flowVars.objectData.id,
	"author":payload.author when (payload.author != null) otherwise flowVars.objectData.author,
	"pages":payload.pages when (payload.pages != null) otherwise flowVars.objectData.pages,
	"title":payload.title when (payload.title != null) otherwise flowVars.objectData.title	
} as :object {class : "com.mule.support.Book"}
]]></dw:set-payload>
                </dw:transform-message>
                <expression-component doc:name="Expression"><![CDATA[app.registry['Library'].put(payload.getId(),payload);]]></expression-component>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;Unable to find a book with the desired ID&quot;}" doc:name="Set Payload" mimeType="application/json"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="delete:/{bookId}:booksExample-config">
         <choice doc:name="Choice">
            <when expression="#[app.registry['Library'].containsKey(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')))]">
                <expression-component doc:name="Expression"><![CDATA[app.registry['Library'].remove(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')));]]></expression-component>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;Unable to find a book with the desired ID&quot;}" doc:name="Set Payload" mimeType="application/json"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="get:/Library:booksExample-config">
        <set-payload value="#[app.registry['Library'].values()]" doc:name="Set Payload"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
(payload filter $.title == inboundProperties."http.query.params".title) 
	when inboundProperties."http.query.params".title != null otherwise payload]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="post:/Library:booksExample-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Choice">
            <when expression="#[!app.registry['Library'].containsKey(payload.id)]">
                <expression-component doc:name="Expression"><![CDATA[Object bookInstance = new com.mule.support.Book();
bookInstance.setTitle(payload.get('title'));
bookInstance.setAuthor(payload.get('author'));
bookInstance.setPages(payload.get('pages'));
bookInstance.setId(payload.get('id'));
app.registry['Library'].put(payload.get('id'),bookInstance);
]]></expression-component>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;A book with the provided ID already exists&quot;}" doc:name="Set Payload" mimeType="application/json"/>
                <set-property propertyName="http.status" value="409" doc:name="Property"/>
            </otherwise>
        </choice>
    </flow>
    <apikit:mapping-exception-strategy name="booksExample-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
